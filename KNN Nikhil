import numpy as np
import pandas as pd
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.model_selection import KFold, train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import OneHotEncoder
from sklearn.impute import SimpleImputer
import matplotlib.pyplot as plt

# Load and preprocess your dataset (replace 'your_dataset.csv' with your dataset)
data = pd.read_csv('your_dataset.csv')

# Assuming the last column is the target label and the rest are features
X = data.iloc[:, :-1]  # Features
y = data.iloc[:, -1]    # Target labels

# Handle missing values before scaling
numeric_columns = X.select_dtypes(include=[np.number])
categorical_columns = X.select_dtypes(exclude=[np.number])

# Create a separate imputer for numeric columns
numeric_imputer = SimpleImputer(strategy='mean')
X[numeric_columns.columns] = numeric_imputer.fit_transform(numeric_columns)

# Handle non-numeric columns (categorical data) using one-hot encoding
encoder = OneHotEncoder(sparse=False, handle_unknown='ignore')
categorical_encoded = encoder.fit_transform(categorical_columns)
categorical_encoded_df = pd.DataFrame(categorical_encoded, columns=encoder.get_feature_names(categorical_columns.columns))

# Concatenate the one-hot encoded DataFrame with the imputed numeric data
X = pd.concat([X[numeric_columns.columns], categorical_encoded_df], axis=1)

# Check for missing values in the dataset
missing_values = X.isnull().sum()
print("Missing Values:\n", missing_values)

# Implement the CustomStandardScaler from scratch
class CustomStandardScaler:
    def fit(self, X):
        self.mean = np.mean(X, axis=0)
        self.std = np.std(X, axis=0)
    
    def transform(self, X):
        scaled_X = (X - self.mean) / (self.std + 1e-8)
        return scaled_X

    def fit_transform(self, X):
        self.fit(X)
        return self.transform(X)

# Initialize the scaler and fit/transform the features
scaler = CustomStandardScaler()
X_scaled = scaler.fit_transform(X)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Determine the best K value
k_values = range(1, 21)  # You can adjust the range as needed
accuracies = []

for k in k_values:
    knn_classifier = KNeighborsClassifier(n_neighbors=k)
    knn_classifier.fit(X_train, y_train)
    y_pred = knn_classifier.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    accuracies.append(accuracy)

best_k = k_values[np.argmax(accuracies)]
best_accuracy = max(accuracies)

# Create a visualization of accuracy vs. K value
plt.plot(k_values, accuracies)
plt.xlabel('K Value')
plt.ylabel 'Accuracy'
plt.title('Accuracy vs. K Value')
plt.show()

# Run 5-fold cross-validation
cv = KFold(n_splits=5, shuffle=True, random_state=42)
cv_scores = []

for k in k_values:
    knn_classifier = KNeighborsClassifier(n_neighbors=k)
    scores = []
    for train_index, test_index in cv.split(X_scaled):
        X_train_cv, X_test_cv = X_scaled[train_index], X_scaled[test_index]
        y_train_cv, y_test_cv = y[train_index], y[test_index]
        knn_classifier.fit(X_train_cv, y_train_cv)
        y_pred_cv = knn_classifier.predict(X_test_cv)
        accuracy_cv = accuracy_score(y_test_cv, y_pred_cv)
        scores.append(accuracy_cv)
    cv_scores.append(scores)

# Report mean and standard deviation of cross-validation scores
cv_mean = np.mean(cv_scores, axis=1)
cv_std = np.std(cv_scores, axis=1)

# Train the KNN model with the best K value on the entire dataset
final_knn_classifier = KNeighborsClassifier(n_neighbors=best_k)
final_knn_classifier.fit(X_scaled, y)

# Evaluate the model using a confusion matrix
y_pred_final = final_knn_classifier.predict(X_test)
conf_matrix = confusion_matrix(y_test, y_pred_final)

# Explain the accuracy of your model in a Markdown cell
